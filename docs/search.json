[
  {
    "objectID": "week_2.html",
    "href": "week_2.html",
    "title": "Group Functions and SubQueries",
    "section": "",
    "text": "This page will roughly cover the five GROUP functions, GROUP BY, and using SubQueries."
  },
  {
    "objectID": "week_2.html#group-by",
    "href": "week_2.html#group-by",
    "title": "Group Functions and SubQueries",
    "section": "GROUP BY",
    "text": "GROUP BY\nWe’ve previously seen that Group Functions summarize values in an interim answer set return values grouped across many rows. The GROUP BY clause enables SQL to provide subtotals. It can perform the group function across a subset of rows in the interim answer set and provide a total for each subset of rows.\n\nCommon Group Functions\n\nSUM: can only be used on numeric columns\nAVG: can only be used on numeric columns\nCOUNT: can be used with any data type column (or with * to simply count rows)\nMIN: can be used with any data type column\nMAX: can be used with any data type column\n\nTo avoid mismatch, remember this rule:\nWhen using a GROUP BY, every column/expression in the SELECT statement must either be:\n\na group function\na column that is being grouped by\n\nAlso remember that even though the group function is sorting the interim answer set in order to calculate the totals, we must still use an order by clause to list the totals in group sequence."
  },
  {
    "objectID": "week_2.html#having",
    "href": "week_2.html#having",
    "title": "Group Functions and SubQueries",
    "section": "HAVING",
    "text": "HAVING\nDefines a condition that selects a subset of rows from the answer set based on the group functions.\nWhen using a group by, the having is like a where clause against the interim answer set.\nThe syntax rules for HAVING are the same as for WHERE."
  },
  {
    "objectID": "week_2.html#subquery",
    "href": "week_2.html#subquery",
    "title": "Group Functions and SubQueries",
    "section": "SubQuery",
    "text": "SubQuery\nSimply a a query within a query, and has 3 modes of use:\n\nSubquery in WHERE: answer set to the inner query is used as a predicate in a where clause in the outer query.\nSubquery in SELECT: answer set to the inner query is used as a column in a select.\nSubquery in FROM: answer set to inner query is used as a virtual table in a from clause.\n\n\nSubqueries must always be enclosed in parentheses."
  },
  {
    "objectID": "week_2.html#example-1",
    "href": "week_2.html#example-1",
    "title": "Group Functions and SubQueries",
    "section": "Example 1",
    "text": "Example 1\n\nQuery\nRecall this will generate an error:\nselect order_id, product_id, sum(unit_price), sum(quantity)\nfrom order_details\nwhere order_id in (10248, 10249, 10250, 10251);\nResult: ERROR, the level of the group function must match the level of detail in the select statement.\nBy adding a GROUP BY clause, we avoid the mismatch and get subtotals by order_id.\nQuery\nselect order_id, product_id, sum(unit_price), sum(quantity)\nfrom order_details\nwhere order_id in (10248, 10249, 10250, 10251)\ngroup by order_id;\nResult: subtotals by the specified groups within the variable specified by the group by clause."
  },
  {
    "objectID": "week_2.html#example-2",
    "href": "week_2.html#example-2",
    "title": "Group Functions and SubQueries",
    "section": "Example 2",
    "text": "Example 2\n\nQuery\nselect country, count(customer_id) as total\nfrom customers\ngroup by country;\nResult: returns the number of customers in each country."
  },
  {
    "objectID": "week_2.html#example-3",
    "href": "week_2.html#example-3",
    "title": "Group Functions and SubQueries",
    "section": "Example 3",
    "text": "Example 3\n\nQuery\nselect supplier_id, avg(unit_price) as total\nfrom products\ngroup by supplier_id;\nResult: returns the average product price for each supplier."
  },
  {
    "objectID": "week_2.html#example-4",
    "href": "week_2.html#example-4",
    "title": "Group Functions and SubQueries",
    "section": "Example 4",
    "text": "Example 4\n\nQuery\nselect supplier_id, sum(units_in_stock) as inventory\nfrom products\ngroup by supplier_id\norder by 2 desc limit 1;\nResult: returns the supplier that northwinds carries the most inventory from."
  },
  {
    "objectID": "week_2.html#example-4-1",
    "href": "week_2.html#example-4-1",
    "title": "Group Functions and SubQueries",
    "section": "Example 4",
    "text": "Example 4\n\nQuery\nselect country, count(customer_id) as total\nfrom customers\ngroup by country\nhaving count(customer_id) &gt; 5\norder by 2 desc;\nResult: returns the countries in which northwinds has more than five customers.\n\nResult: returns the supplier that northwinds carries the most inventory from."
  },
  {
    "objectID": "week_2.html#example-5",
    "href": "week_2.html#example-5",
    "title": "Group Functions and SubQueries",
    "section": "Example 5",
    "text": "Example 5\n\nUsing the common Group Functions.\nQuery\nselect COUNT(*) as \"Staff Size\"\nfrom employees;\n\nselect COUNT(Distinct country) as \"Countries\"\nfrom customer;\n\nselect SUM(units_in_stock) as \"Inventory\"\nfrom inventory;\n\nselect MAX(unit_price) as \"High Price\"\nfrom products;\n\nselect MIN(unit_price) as \"Low Price\"\nfrom products;\nResult: returns results from database columns using the common group functions."
  },
  {
    "objectID": "week_2.html#example-6",
    "href": "week_2.html#example-6",
    "title": "Group Functions and SubQueries",
    "section": "Example 6",
    "text": "Example 6\n\nQuery\nselect to_char(avg(unit_price), '999,999.99') as \"Average Price\"\nfrom products;\nResult: returns rounded average price from unit price."
  },
  {
    "objectID": "week_2.html#example-7",
    "href": "week_2.html#example-7",
    "title": "Group Functions and SubQueries",
    "section": "Example 7",
    "text": "Example 7\n\nPredicate in a WHERE clause with the = operator.\nQuery\nselect product_id, product_name, unit_price\nfrom products\nwhere unit_price = (\n  select max(unit_price)\n  from products\n);\nResult: returns the product_id, name, and unit_price of the highest priced product."
  },
  {
    "objectID": "week_2.html#example-8",
    "href": "week_2.html#example-8",
    "title": "Group Functions and SubQueries",
    "section": "Example 8",
    "text": "Example 8\n\nPredicate in a WHERE clause with the in operator.\n\nNote: this uses TWO different tables.\n\nQuery\nselect customer_id, order_id\nfrom orders\nwhere order_id in (\n  select order_id\n  from order_details\n  where quantity &gt; 100\n);\nResult: returns the order_ids from the orders database where order quantity is above 100 from the order_details database."
  },
  {
    "objectID": "week_2.html#example-9",
    "href": "week_2.html#example-9",
    "title": "Group Functions and SubQueries",
    "section": "Example 9",
    "text": "Example 9\n\nQuery\nselect product_name,\n(select sum(unit_price * quantity)\n  from order_details\n  where order_details.product_id = products_order_id) as \"Total\nfrom products;\nResult: list each product name and the total value of that product’s order."
  },
  {
    "objectID": "week_2.html#example-10",
    "href": "week_2.html#example-10",
    "title": "Group Functions and SubQueries",
    "section": "Example 10",
    "text": "Example 10\n\nQuery\nselect order_id\nfrom (select order_id, sum(quantity)\n  from order_details\n  group by order_id\n  having sum(quantity) &lt; 100)\nas detail_count;\nResult: create a list of all orders with fewer than 100 items sold (note: the subquery must have an alias name)."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "SQL",
    "section": "",
    "text": "A website dedicated to fundamental SQL use.\nThe DBMS the SQL queries are ran through, and respective syntax used, will PostgreSQL.\nMuch of the content originated from The Structured Query Language (SQL), through CU Boulder on Coursera.\nThe database used for practice is the Northwinds Database. Implementation code can be found here."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\nCode1 + 1\n\n[1] 2"
  },
  {
    "objectID": "week_1.html",
    "href": "week_1.html",
    "title": "The Basic SELECT",
    "section": "",
    "text": "Where every course in SQL begins, the SELECT statement. We’ll then venture into other basic functions.\nLet’s practice some SQL queries on the Northwinds Database."
  },
  {
    "objectID": "week_1.html#basic-select",
    "href": "week_1.html#basic-select",
    "title": "The Basic SELECT",
    "section": "Basic SELECT",
    "text": "Basic SELECT\n\nExample 1\n\nQuery\nSELECT * from employees;\nResult: returns all rows and all columns.\n\n\n\nExample 2\n\nQuery\nSELECT employee_id, last_name, first_name from employees;\nResult: returns selected columns."
  },
  {
    "objectID": "week_1.html#expressions",
    "href": "week_1.html#expressions",
    "title": "The Basic SELECT",
    "section": "Expressions",
    "text": "Expressions\n\nExample 1 - Functions\n\nQuery\nSELECT last_name, first_name, hire_date, current_date,\n  date_part('month', hire_date)\n  from employees;\nResult: returns selected column and a new column with just the month of the date the employee was hired.\n\n\n\nExample 2 - Math Equations\n\nQuery\nSELECT order_id, unit_price, quantity,\n  unit_price * quantity\n  from order_details;\nResult: returns selected column and a new column with the unit_price times the quantity (i.e. total sales)."
  },
  {
    "objectID": "week_1.html#column-aliases",
    "href": "week_1.html#column-aliases",
    "title": "The Basic SELECT",
    "section": "Column Aliases",
    "text": "Column Aliases\n\nExample 1 - Functions (with Alias)\n\nQuery\nSELECT last_name, first_name, hire_date, current_date,\n  date_part('month', hire_date) as \"Hire Month\"\n  from employees;\nResult: returns selected column and a new column with just the month of the date the employee was hired.\n\n\n\nExample 2 - Math Equations (with Alias)\n\nQuery\nSELECT order_id, unit_price, quantity,\n  unit_price * quantity as \"Total Value\"\n  from order_details;\nResult: returns selected column and a new column with the unit_price times the quantity (i.e. total sales)."
  },
  {
    "objectID": "week_1.html#concatenation",
    "href": "week_1.html#concatenation",
    "title": "The Basic SELECT",
    "section": "Concatenation",
    "text": "Concatenation\n\nExample 1 - Function\n\nQuery\nSELECT concat(first_name, ' ', last_name) as \"Name\"\n  from employees;\nResult: returns a new column named “Name” with the employee’s first and last name concatenated together with a space between the name portions.\n\n\n\nExample 2 - Syntax\n\nQuery\nSELECT first_name || ' ' || last_name as \"Name\"\n  from employees;\nResult: returns a new column named “Name” with the employee’s first and last name concatenated together with a space between the name portions."
  },
  {
    "objectID": "week_1.html#comments",
    "href": "week_1.html#comments",
    "title": "The Basic SELECT",
    "section": "Comments",
    "text": "Comments\n\nExample 1 - Single Line Comment\n\nQuery\nSELECT concat(first_name, ' ', last_name) as \"Name\"\n--- this is concatenating the first and last name\n  from employees;\nResult: single line comment only visible in the query code text, not in output.\n\n\n\nExample 2 - Multi-Line Comment\n\nQuery\nSELECT concat(first_name, ' ', last_name) as \"Name\"\n/* this is concatenating the first and last name\nso that the names are combined */\n  from employees;\nResult: multi-line comment only visible in the query code text, not in output."
  },
  {
    "objectID": "week_1.html#lab-1",
    "href": "week_1.html#lab-1",
    "title": "The Basic SELECT",
    "section": "Lab 1",
    "text": "Lab 1\n\nQuestion 1\nQuestion\nList all the products in the North Winds database showing product_id, product_name, quantity_per_unit, unit_price, and units_in_stock.\nAnswer:\nSELECT product_id, product_name, quantity_per_unit, unit_price, units_in_stock\n  FROM products;\n\n\nQuestion 2\nQuestion\nFor all employees at North Winds, list the first name and last name concatenated together with a blank space in-between, and the YEAR when they were hired.\nAnswer:\nSELECT concat(first_name, ' ', last_name) as name,\n  date_part('year', hire_date)\n  FROM employees;\n\n\nQuestion 3\nQuestion\nFor all products in the North Winds database, list the product_name, unit_price, units_in_stock, and the total value of the inventory of that product as “total_value”.\nHint: total_value = units_in_stock * unit_price\nAnswer:\nSELECT product_name, unit_price, units_in_stock,\n  units_in_stock * unit_price as total_value\n  FROM products;\n\n\nQuestion 4\nQuestion\nFor all employees at North Winds, list the first and last name concatenated together with a blank space between under column header “name”, and the name of the month (spelled out) for each employee’s birthday.\nAnswer:\nSELECT concat(first_name, ' ', last_name) as name,\n  --- date_part('month', birth_date) will return the number month\n  --- to_char(birth_date, 'month') will return the month spelled out, in lowercase\n  --- to_char(birth_date, 'Month') will return the month spelled out, in proper case\n  --- to_char(birth_date, 'MONTH') will return the month spelled out, in uppercase\n  to_char(birth_date, 'Month')\n  FROM employees;"
  },
  {
    "objectID": "week_1.html#lab-2",
    "href": "week_1.html#lab-2",
    "title": "The Basic SELECT",
    "section": "Lab 2",
    "text": "Lab 2\n\nQuestion 1\nQuestion:\nList the customerid, companyname, and country for all customers NOT in the USA.\nAnswer:\nselect customer_id, company_name, country\nfrom customers\nwhere not country = 'U.S.A';\n\n\nQuestion 2\nQuestion:\nFor all products in the Northwinds database, list the productname, unitprice, unitsinstock, and the total value of the inventory of that product as “Total Value” for all products with a Total Value greater than $1000.\n(HINT:  total value = unitsinstock * unitprice)\nAnswer:\nselect product_name, unit_price, units_in_stock,\n(unit_price * units_in_stock) as total_value\nfrom products\nwhere (unit_price * units_in_stock) &gt; 1000;\n\n\nQuestion 3\nQuestion:\nList the productid, productname, and unitprice for all products whose categoryid is an ODD number.\n(HINT: categoryid is a one digit integer less than 9)\nAnswer:\nselect product_id, product_name, unit_price, category_id\nfrom products\nwhere not (category_id % 2) in (0);\n\n\nQuestion 4\nQuestion:\nList the productid, productname, and quantityperunit for all products that come in bottles.\nAnswer:\nselect product_id, product_name, quantity_per_unit\nfrom products\nwhere quantity_per_unit like '%bottle%';\n\n\nQuestion 5\nQuestion:\nList the orderid, customerid, and shippeddate for orders that shipped to Canada in December 1996 through the end of January 1997.\nAnswer:\nselect order_id, customer_id, shipped_date\nfrom products\nwhere (ship_country = 'Canada')\nand (shipped_date between '1996-12-01' and '1997-01-31');"
  },
  {
    "objectID": "week_1.html#lab-3",
    "href": "week_1.html#lab-3",
    "title": "The Basic SELECT",
    "section": "Lab 3",
    "text": "Lab 3\n\nQuestion 1\nQuestion:\nList the employeeid, firstname + lastname concatenated as ‘employee’, and the age of the employee when they were hired.\nAnswer:\nselect employee_id, concat(first_name, ' ', last_name) as employee,\nage(hire_date, birth_date)\nfrom employees;\n\n\nQuestion 2\nQuestion:\nRun a query to calculate your age as of today.\nAnswer:\nselect age(to_date('19941201', 'YYYYMMDD'));\n\n\nQuestion 3\nQuestion:\nList the employeeid, firstname + lastname concatenated as ‘employee’, and hire date for all employees hired in 1993.\nAnswer:\nselect employee_id, concat(first_name, ' ', last_name) as employee,\nhire_date\nfrom employees\nwhere hire_date between '19930101' and '19931231';"
  }
]